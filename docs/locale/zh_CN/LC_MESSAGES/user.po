# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2017, Yunify, Inc.
# This file is distributed under the same license as the qingstor-sdk
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2017.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: qingstor-sdk 2.1.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-03-31 16:05+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.3.4\n"

#: ../../user/quick_start.rst:2
msgid "Quick Start"
msgstr "快速指南"

#: ../../user/quick_start.rst:4
msgid ""
"Before using qingstor-sdk, please confirm that you already know `QingStor"
" Object Storage basic concepts "
"<https://docs.qingcloud.com/qingstor/api/common/overview.html>`_ , such "
"as  ``Zone``, ``Serivce``, ``Bucket``, ``Object`` and so on."
msgstr ""
"在开始使用 SDK 之前，请确认您已经了解\ `青云 QingStor"
"对象存储基本概念 <https://docs.qingcloud.com/qingstor/api/common/overview.html>`_"
"，如 Zone，Service，Bucket，Object 等。"

#: ../../user/quick_start.rst:7
msgid "Preparing Work"
msgstr "准备工作"

#: ../../user/quick_start.rst:9
msgid ""
"In order to use qingstor-sdk, you need to apply `API Key "
"<https://console.qingcloud.com/access_keys/>`_ first in our console which"
" including ``access_key_id`` and ``secret_access_key``."
msgstr ""
"为了能够使用 qingstor-sdk ，您需要先在我们的控制台申请 `API密钥  <https://console.qingcloud.com/access_keys/>`_  ， 包括 ``API密钥ID(access_key_id)`` 和 ``API密钥的私钥(secret_access_key)`` 。 "

#: ../../user/quick_start.rst:11
msgid ""
"``access_key_id`` will be sent as params in every request, and "
"``secret_access_key`` is used to generate request signature. "
"``secret_access_key`` need to be properly kept, do not rumor."
msgstr ""
"``API密钥ID`` 将作为参数包含在每一个请求中发送；而  ``API密钥的私钥`` 负责生成请求串的签名， ``API密钥的私钥`` 需要被妥善保管，请勿外传。"

#: ../../user/quick_start.rst:14
msgid "Configuration"
msgstr "配置文件"

#: ../../user/quick_start.rst:16
msgid ""
"Before use qingstor-sdk, we need to create a local configuration. "
"Configuration is placed at ``~/.qingstor/config.yaml`` by default, you "
"can also specify a specific location by calling the "
"``load_config_from_filepath()`` method when the SDK is initialized."
msgstr ""
"在使用 SDK 之前，我们需要创建一个本地的配置文件。配置文件默认放在 ``~/.qingstor/config.yaml`` ，也可以在初始化 SDK 时通过调用  ``load_config_from_filepath()`` 方法来指定具体的位置。"

#: ../../user/quick_start.rst:18
msgid ""
"The configuration file also supports config ``host``, ``port`` and other "
"parameters, you only need to add the corresponding configuration items, "
"all the configurable items are as follows::"
msgstr ""
"配置文件同时支持 ``host`` ， ``port`` 等参数的配置，只需要添加对应配置项即可，全部的可配置项如下:"

#: ../../user/quick_start.rst:30
msgid "Initialize Service"
msgstr "初始化服务"

#: ../../user/quick_start.rst:32
msgid ""
"First we need to initialize a QingStor Service to call services that "
"QingStor provided:"
msgstr ""
"首先我们需要初始化一个 QingStor Service 来调用 QingStor 提供的各项服务："

#: ../../user/quick_start.rst:42 ../../user/quick_start.rst:56
#: ../../user/quick_start.rst:92
msgid "The object that appear in the above code:"
msgstr "上面代码中出现的对象："

#: ../../user/quick_start.rst:44
msgid ""
"``config`` object carries the user's authentication information and "
"configuration."
msgstr ""
"``config`` 对象承载了用户的认证信息及配置。"

#: ../../user/quick_start.rst:45
msgid ""
"``service`` object is used to manipulate the QingStor Object Storage "
"service, you can use it to create a Bucket object or use all service-"
"level APIs."
msgstr ""
"``service`` 对象用于操作 QingStor 对象存储服务，可以创建一个 Bucket 对象或者使用所有 Service 级别的 API。"

#: ../../user/quick_start.rst:48
msgid "Create a Bucket"
msgstr "创建一个 Bucket"

#: ../../user/quick_start.rst:50
msgid "First we need to initialize a Bucket object to operate on the bucket:"
msgstr "首先我们需要初始化一个 Bucket 对象来对 Bucket 进行操作："

#: ../../user/quick_start.rst:58
msgid ""
"``bucket`` object is used to manipulate the bucket and can use all of the"
" bucket and object levels API."
msgstr "bucket 对象用于操作 Bucket，可以使用所有 Bucket 和 Object 级别的 API。"

#: ../../user/quick_start.rst:60
msgid "After the object is created, we need to actually create the bucket:"
msgstr "对象创建完毕后，我们需要执行真正的创建 Bucket 操作："

#: ../../user/quick_start.rst:67 ../../user/quick_start.rst:87
#: ../../user/quick_start.rst:113 ../../user/quick_start.rst:131
#: ../../user/quick_start.rst:147 ../../user/quick_start.rst:162
#: ../../user/quick_start.rst:177 ../../user/quick_start.rst:194
#: ../../user/quick_start.rst:216 ../../user/quick_start.rst:237
#: ../../user/quick_start.rst:254 ../../user/quick_start.rst:271
#: ../../user/quick_start.rst:286 ../../user/quick_start.rst:310
msgid "The functions that appear in the above code:"
msgstr "上面代码中出现的函数："

#: ../../user/quick_start.rst:69
msgid "``bucket.put()`` will create a ``test`` bucket in ``pek3a``"
msgstr "bucket.put() 在 ``pek3a`` 区域创建一个名为 ``test`` 的 Bucket。"

#: ../../user/quick_start.rst:71
msgid "The object that appears in the above code:"
msgstr "上面代码中出现的对象："

#: ../../user/quick_start.rst:73
msgid "resp object is the response of bucket.put()"
msgstr "resp 对象是 bucket.put() 函数的返回体。"

#: ../../user/quick_start.rst:74
msgid ""
"status\\_code is a property of the resp object that indicates the status "
"code returned by this operating server. In the result of the request "
"return, the HTTP status code indicates the status of the processing, "
"which conforms to the semantics specified by the HTTP specification."
msgstr ""
"status\\_code 是 resp 对象的一个属性，表示本次操作服务器返回的状态码。在请求返回的结果中，HTTP 状态码(status code)会表明处理完成后的状态，它符合 HTTP 规范所规定的语义。"

#: ../../user/quick_start.rst:77
msgid "Get Buckets under accounts"
msgstr "获取账户下的 Bucket 列表"

#: ../../user/quick_start.rst:79
msgid ""
"Before we created a Bucket, then we will demonstrate how to get all the "
"Buckets under the account."
msgstr "之前我们创建了一个 Bucket ，接下来我们将会示范如何获取账户下所有 Buckets。"

#: ../../user/quick_start.rst:89
msgid ""
"`service.list\\_buckets() "
"<https://docs.qingcloud.com/qingstor/api/service/get.html>`__ List all "
"the buckets owned by the currently used account."
msgstr ""
"`service.list\\_buckets() <https://docs.qingcloud.com/qingstor/api/service/get.html>`_ 列出当前使用的账户所拥有的所有 Buckets。"

#: ../../user/quick_start.rst:94
msgid "resp object is the response of bucket.list\\_buckets()"
msgstr "resp 对象是 service.list\\_buckets() 函数的返回体。"

#: ../../user/quick_start.rst:96
msgid ""
"When the response's content-type is ``application-json`` , sdk will "
"attempt to parse the return body and add the individual keys to the resp "
"object. At this point you can manipulate the resp object as a dict. In "
"this example, the contents of the resp object can be referenced at `GET "
"Service <https://docs.qingcloud.com/qingstor/api/service/get.html>`_."
msgstr ""
"在服务器端返回 content-type 类型为 application-json 时，"
"sdk将会尝试解析返回体并将各个键加入 resp 对象。 此时您可以使用 dict"
"一样来操作 resp 对象。 在本样例中，resp"
"对象中拥有的内容可以参考 `GET "
"Service <https://docs.qingcloud.com/qingstor/api/service/get.html>`__"

#: ../../user/quick_start.rst:99
msgid "Upload an Object"
msgstr "上传一个 Object"

#: ../../user/quick_start.rst:101
msgid "Next we will show you how to upload an Object in the Bucket:"
msgstr "接下来我们将会演示如何在 Bucket 中上传一个 Object："

#: ../../user/quick_start.rst:115 ../../user/quick_start.rst:149
msgid "tempfile.NamedTemporaryFile() created a temporary file."
msgstr "tempfile.NamedTemporaryFile() 创建了一个临时文件。"

#: ../../user/quick_start.rst:116
msgid ""
"`bucket.put\\_object() "
"<https://docs.qingcloud.com/qingstor/api/object/put.html>`_ Upload an "
"Object to Bucket."
msgstr ""
"`bucket.put\_object() <https://docs.qingcloud.com/qingstor/api/object/put.html>`__"
"   向 Bucket 上传一个 Object。"

#: ../../user/quick_start.rst:118
msgid ""
"The first argument represents the Key of the Object, and the Object Key "
"is the identity of the object that corresponds to the bucket in the "
"QingStor object storage system, which is equivalent to the file name in "
"the local storage system."
msgstr "第一个参数表示 Object 的 Key，Object Key 是该 Object 在 QingStor 对象存储系统对应 Bucket 中具有唯一性的标识，相当于本地存储系统中的文件名。"

#: ../../user/quick_start.rst:119
msgid ""
"``body`` means the contents of the upload Object, it's value can be a "
"string ans also can be any file object."
msgstr "body 表示本次上传的 Object 的内容，他的值可以是字符串也可以是任意的文件对象。"

#: ../../user/quick_start.rst:122
msgid "List Objects in Bucket"
msgstr "列出 Bucket 中的 Objects"

#: ../../user/quick_start.rst:124
msgid ""
"Before we upload an Object in Bucket, we will show you how to list "
"objects in Bucket:"
msgstr ""
"之前我们在 Bucket 上传了一个 Object，接下来我们将会演示如何如何列出 Bucket 中的 Objects："

#: ../../user/quick_start.rst:133
msgid ""
"`bucket.list\\_objects() "
"<https://docs.qingcloud.com/qingstor/api/bucket/get.html>`_ List objects "
"in the bucket."
msgstr ""
"`bucket.list\\_objects() <https://docs.qingcloud.com/qingstor/api/bucket/get.html>`__"
"   列出 bucket 中的 objects。"

#: ../../user/quick_start.rst:137
msgid "Download an Object"
msgstr "下载一个 Object"

#: ../../user/quick_start.rst:150
msgid ""
"`bucket.get\\_object() "
"<https://docs.qingcloud.com/qingstor/api/object/get.html>`_ Get an "
"Object."
msgstr ""
"`bucket.get\\_object() <https://docs.qingcloud.com/qingstor/api/object/get.html>`__"
"   获取一个 Object。"

#: ../../user/quick_start.rst:152
msgid ""
"``resp.iter\\_content()`` Automatically iterates the contents of an "
"Object to reduce memory footprint and improve performance"
msgstr ""
"resp.iter\\_content() 自动迭代 Object 的内容，以减少内存占用，提高性能。"

#: ../../user/quick_start.rst:155
msgid "Check the status of an Object"
msgstr "查看一个 Object 的状态"

#: ../../user/quick_start.rst:164
msgid ""
"`bucket.head\\_object() "
"<https://docs.qingcloud.com/qingstor/api/object/head.html>`__ View the "
"status of an Object, the returning object's status\\_code conforms to the"
" semantics specified by the HTTP specification. For example: 200 means "
"the file status is normal, you can download or delete it; 404 means the "
"file does not exist and so on."
msgstr ""
"`bucket.head\_object() <https://docs.qingcloud.com/qingstor/api/object/head.html>`__"
"   查看一个 Object 的状态，返回对象的 status\_code 符合 HTTP"
"   规范所规定的语义，比如： 200"
"   表示文件状态正常，可以进行下载或删除等操作； 404 表示文件不存在等。"

#: ../../user/quick_start.rst:168
msgid "Delete an Object"
msgstr "删除一个 Object"

#: ../../user/quick_start.rst:170
msgid "Next we will show you how to delete an object."
msgstr "接下来我们将会演示如何删除一个 object。"

#: ../../user/quick_start.rst:179
msgid ""
"`bucket.delete\\_object() "
"<https://docs.qingcloud.com/qingstor/api/object/delete.html>`__ Delete an"
" Object."
msgstr ""
"`bucket.delete\_object() <https://docs.qingcloud.com/qingstor/api/object/delete.html>`__"
"   删除一个 Object。"

#: ../../user/quick_start.rst:183
msgid "Initialize a multipart upload"
msgstr "初始化一个分段上传"

#: ../../user/quick_start.rst:185
msgid ""
"QingStor Object Storage support for file multipart upload, maximum "
"support 10,000, each size up to 5G, on the one hand to help users to "
"large files in the shortest possible time to upload, on the other hand "
"allows users to store up to 50TB file. Below we will show how to use the "
"QingStor Object Storage Multipart Upload API."
msgstr ""
"QingStor 对象存储支持对文件进行分段上传，最大支持 10,000 段，每段大小最大可达 5G，一方面帮助用户将大文件在尽可能短的时间内上传，另一方面允许用户存储最大至 50TB 的文件。下面我们将会演示如何使用 QingStor 对象存储的分段上传接口。"

#: ../../user/quick_start.rst:196
msgid ""
"`bucket.initiate\\_multipart\\_upload() "
"<https://docs.qingcloud.com/qingstor/api/object/multipart/initiate_multipart_upload.html>`_"
" Initialize a segment upload, the request will return a Upload ID. When "
"uploading a segment, the Upload ID is appended to the request parameter, "
"indicating that the segment belongs to the same object."
msgstr ""
"`bucket.initiate\_multipart\_upload() <https://docs.qingcloud.com/qingstor/api/object/multipart/initiate_multipart_upload.html>`_"
"   初始化一个分段上传，该请求会返回一个Upload"
"   ID，后续在上传分段时，在请求参数中附加该 Upload"
"   ID，则表明分段属于同一个对象。"

#: ../../user/quick_start.rst:200
msgid "Upload a multipart"
msgstr "上传一个分段"

#: ../../user/quick_start.rst:218
msgid ""
"tempfile.NamedTemporaryFile(), f.seek(), f.write(), f.flush() Created a "
"temporary file with a size of 5MB"
msgstr "tempfile.NamedTemporaryFile(), f.seek(), f.write(), f.flush() 等函数创建了一个大小为 5MB 的临时文件"

#: ../../user/quick_start.rst:220
msgid ""
"`bucket.upload\\_multipart() "
"<https://docs.qingcloud.com/qingstor/api/object/multipart/upload_multipart.html>`_"
" Used to upload a multipart. Except the last segment, the other segments "
"have a minimum size of 4M and a maximum size  of 1G."
msgstr ""
"`bucket.upload\\_multipart() <https://docs.qingcloud.com/qingstor/api/object/multipart/upload_multipart.html>`__"
"   用于上传一个分段，除最后一个分段以外，其它分段最小为"
"   4M，每个分段最大为 1G。"

#: ../../user/quick_start.rst:222
msgid ""
"``upload\\_id`` is the returning ``Upload ID`` while "
"initiate_multipart_upload, multipart upload with the same ``Upload ID`` "
"means they belong to the same object."
msgstr "upload\\_id 参数是初始化分段上传时返回的 Upload ID，拥有相同 Upload ID 的分段上传属于同一个对象。"

#: ../../user/quick_start.rst:223
msgid ""
"``part\\_number`` is part number, parts merged in accordance with the "
"part number from small to large order."
msgstr "part\\_number 参数是分段序号，合并时需按照序号从小到大顺序。"

#: ../../user/quick_start.rst:226
msgid "List multipart uploaded"
msgstr "列出已经上传的分段"

#: ../../user/quick_start.rst:239
msgid ""
"`bucket.list\\_multipart() "
"<https://docs.qingcloud.com/qingstor/api/object/multipart/list_multipart.html>`_"
" Used to list multiparts that have been uploaded."
msgstr ""
"`bucket.list\\_multipart() <https://docs.qingcloud.com/qingstor/api/object/multipart/list_multipart.html>`__"
"   用于列出已经上传的分段信息。"

#: ../../user/quick_start.rst:243
msgid "Complete a multipart upload"
msgstr "完成一个分段上传"

#: ../../user/quick_start.rst:256
msgid ""
"`bucket.complete\\_multipart\\_upload() "
"<https://docs.qingcloud.com/qingstor/api/object/multipart/complete_multipart_upload.html>`_"
" Used to end this multipart upload, to get a complete object. When this "
"API is not called, the multipart upload is in an incomplete state, and "
"the GET request to retrieve the object will return an error."
msgstr ""
"`bucket.complete\\_multipart\\_upload() <https://docs.qingcloud.com/qingstor/api/object/multipart/complete_multipart_upload.html>`__"
"   用于结束此分段上传，从而获得一个完整的对象。在未调用此接口时，分段上传处于未完成的状态，此时调用 GET 请求获得该对象会返回错误。"

#: ../../user/quick_start.rst:258
msgid ""
"``object\\_parts`` specify the part number that needed to merge, should "
"follow the part number from small to large order."
msgstr "object\\_parts 指定需要合并的 part\\_number , 需按照序号从小到大顺序。"

#: ../../user/quick_start.rst:261
msgid "Abort a multipart upload"
msgstr "取消一个分段上传"

#: ../../user/quick_start.rst:273
msgid ""
"`bucket.abort\\_multipart\\_upload() "
"<https://docs.qingcloud.com/qingstor/api/object/multipart/abort_multipart_upload.html>`_"
" Terminate the multipart upload, and delete the already uploaded "
"multipart."
msgstr ""
"`bucket.abort\\_multipart\\_upload() <https://docs.qingcloud.com/qingstor/api/object/multipart/abort_multipart_upload.html>`__"
"   终止分段上传，并删除已经上传的分段。"

#: ../../user/quick_start.rst:277
msgid "Get bucket's access control list"
msgstr "获取 Bucket 的访问控制列表"

#: ../../user/quick_start.rst:279
msgid ""
"The QingStor Object Storage support storage access control lists (Bucket "
"ACLs). For storage-level access control, users can grant read, write, "
"read, or read and write permissions to a single or multiple QingCloud "
"users. Here we will demonstrate how to use the API to get and set the "
"Bucket ACL."
msgstr ""
"QingStor 对象存储支持存储空间访问控制列表 (Bucket ACL), 为存储空间级别的访问控制，用户可将存储空间的读、写、或读写权限开放给单个或多个 QingCloud 用户。下面我们将会演示如何通过 API 接口来获取和设置 Bucket ACL。"

#: ../../user/quick_start.rst:288
msgid ""
"`bucket.get\\_acl() "
"<https://docs.qingcloud.com/qingstor/api/bucket/acl/get_acl.html>`_ Get "
"access control list for Bucket."
msgstr ""
"`bucket.get\\_acl() <https://docs.qingcloud.com/qingstor/api/bucket/acl/get_acl.html>`__"
"   获取存储空间的访问控制列表 (Access Control List)。"

#: ../../user/quick_start.rst:292
msgid "Set bucket's access control list"
msgstr "设置 Bucket 的访问控制列表"

#: ../../user/quick_start.rst:312
msgid ""
"`bucket.put\\_acl() "
"<https://docs.qingcloud.com/qingstor/api/bucket/acl/put_acl.html>`__ Set "
"access control list for Bucket."
msgstr ""
"`bucket.put\\_acl() <https://docs.qingcloud.com/qingstor/api/bucket/acl/put_acl.html>`__"
"   设置存储空间的访问控制列表 (Access Control List)。"

#: ../../user/quick_start.rst:314
msgid ""
"``acl`` used to set Bucket's ACL. This example gives all QingCloud users "
"the read access to the bucket"
msgstr ""
"acl 参数用于设置 Bucket 的 ACL ，本样例向所有青云QingCloud"
"   用户赋予了该 Bucket 的只读权限。"

#: ../../user/quick_start.rst:317
msgid "More operations"
msgstr "更多操作"

#: ../../user/quick_start.rst:319
msgid ""
"All API call interfaces are similar to the example above, you can visit "
"`QingStor Object Storage API Documentation "
"<https://docs.qingcloud.com/qingstor/api/index.html>`_ for more "
"information."
msgstr ""
"所有的API调用接口均与上面的示例相似，您可以访问 `青云QingStor 对象存储 API 文档 <https://docs.qingcloud.com/qingstor/api/index.html>`__ 来了解更多讯息。"
