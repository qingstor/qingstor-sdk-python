{{define "CustomizedTypeRequestParams"}}
  {{- $customizedType := . -}}
  {{- $firstPropertyID := $customizedType | firstPropertyIDInCustomizedType -}}
  {{- range $_, $property := $customizedType.Properties -}}
    {{- if ne $property.ID $firstPropertyID -}},
    {{end -}}
    {{- if eq $property.Type "string" -}}
      {{$property.ID | snakeCase}}= ""
    {{- else if eq $property.Type "timestamp" -}}
      {{$property.ID | snakeCase}}=""
    {{- else if eq $property.Type "array" -}}
      {{$property.ID | snakeCase}}=list()
    {{- else if eq $property.Type "map" -}}
      {{$property.ID | snakeCase}}=dict()
    {{- else -}}
      {{$property.ID | snakeCase}}=None
    {{- end -}}
  {{- end -}}
{{end}}

{{define "OperationInitParams"}}
  {{- $service := index . 0 -}}
  {{- $operation := index . 1 -}}

  {{- $hasParams := gt (len $operation.Request.Params.Properties) 0 -}}
  {{- $hasHeaders := gt (len $operation.Request.Headers.Properties) 0 -}}
  {{- $hasElements := gt (len $operation.Request.Elements.Properties) 0 -}}

  {{- template "CustomizedTypeRequestParams" $operation.Request.Params -}}
  {{- if and $hasParams $hasHeaders -}},{{end}}
  {{- template "CustomizedTypeRequestParams" $operation.Request.Headers -}}
  {{- if and (or $hasParams $hasHeaders) $hasElements -}},{{end}}
  {{- template "CustomizedTypeRequestParams" $operation.Request.Elements -}}

  {{- if eq $operation.Request.Body.Type "string" -}}
    {{- if or $hasParams $hasHeaders $hasElements -}},{{end}}
    body=""
  {{- else if eq $operation.Request.Body.Type "binary" -}}
    {{- if or $hasParams $hasHeaders $hasElements -}},{{end}}
    body=None
  {{- end -}}
{{end}}

{{define "OperationCallParams"}}
  {{- $service := index . 0 -}}
  {{- $operation := index . 1 -}}

  {{- $hasParams := gt (len $operation.Request.Params.Properties) 0 -}}
  {{- $hasHeaders := gt (len $operation.Request.Headers.Properties) 0 -}}
  {{- $hasElements := gt (len $operation.Request.Elements.Properties) 0 -}}

  {{- $firstID := $operation.Request.Params | firstPropertyIDInCustomizedType -}}
  {{- range $_, $property := $operation.Request.Params.Properties -}}
    {{- if ne $property.ID $firstID -}},
    {{end -}}
    {{$property.ID | snakeCase}}={{$property.ID | snakeCase}}
  {{- end -}}

  {{- if and $hasParams $hasHeaders -}},{{end}}

  {{- $firstID := $operation.Request.Headers | firstPropertyIDInCustomizedType -}}
  {{- range $_, $property := $operation.Request.Headers.Properties -}}
    {{- if ne $property.ID $firstID -}},
    {{end -}}
    {{$property.ID | snakeCase}}={{$property.ID | snakeCase}}
  {{- end -}}

  {{- if and (or $hasParams $hasHeaders) $hasElements -}},{{end}}

  {{- $firstID := $operation.Request.Elements | firstPropertyIDInCustomizedType -}}
  {{- range $_, $property := $operation.Request.Elements.Properties -}}
    {{- if ne $property.ID $firstID -}},
    {{end -}}
    {{$property.ID | snakeCase}}={{$property.ID | snakeCase}}
  {{- end -}}

  {{- if eq $operation.Request.Body.Type "string"}}
    ,body=body
  {{- else if eq $operation.Request.Body.Type "binary"}}
    ,body=body
  {{- end -}}
{{end}}

{{- define "RenderCustomizedTypeValidation"}}
{{- $prefix := index . 0}}
{{- $customizedType := index . 1}}
{{- $customizedTypes := index . 2}}
{{- $spaces := index . 3}}
{{- range $_, $property := $customizedType.Properties}}
        {{- if eq $property.Type "object"}}
        {{$spaces}}if "{{$property.ID}}" not in {{$prefix}}:
            {{- $nextPrefix := printf "%s[\"%s\"]" $prefix $property.ID}}
            {{- $nextCustomizedType := index $customizedTypes $property.ExtraType}}
            {{- $nextSpaces := printf "%s    " $spaces}}
            {{- $x := passThrough $nextPrefix $nextCustomizedType $customizedTypes $nextSpaces }}
            {{- template "RenderCustomizedTypeValidation" $x }}
            {{$spaces}}pass
            {{- if $property.IsRequired }}
            {{$spaces}}if "{{$property.ID}}" not in {{$prefix}}:
                {{$spaces}}raise ParameterRequiredError("{{$property.ID}}", "{{$customizedType.ID}}")
            {{- end}}
        {{- else if eq $property.Type "array"}}
        {{- if $property.IsRequired}}
        {{$spaces}}if "{{$property.ID}}" not in {{$prefix}} and not {{$prefix}}["{{$property.ID}}"]:
            {{$spaces}}raise ParameterRequiredError("{{$property.ID}}", "{{$customizedType.ID}}")
        {{- end}}
        {{- $isNotString := ne $property.ExtraType "string"}}
        {{- $isNotInteger := ne $property.ExtraType "integer"}}
        {{- $isNotTimestamp := ne $property.ExtraType "timestamp"}}
        {{- if and $isNotString $isNotInteger $isNotTimestamp}}
        {{$spaces}}for x in {{$prefix}}["{{$property.ID}}"]:
            {{- $nextCustomizedType := index $customizedTypes $property.ExtraType}}
            {{- $nextSpaces := printf "%s    " $spaces}}
            {{- $x := passThrough "x" $nextCustomizedType $customizedTypes $nextSpaces}}
            {{- template "RenderCustomizedTypeValidation" $x}}
            {{$spaces}}pass
        {{- end}}
        {{- else}}
        {{- $isContentLength := eq $property.ID "Content-Length"}}
        {{- if not $isContentLength}}
        {{- if $property.IsRequired}}
        {{$spaces}}if {{$prefix}}["{{$property.ID}}"] and not {{$prefix}}["{{$property.ID}}"]:
            {{$spaces}}raise ParameterRequiredError("{{$property.ID}}", "{{$customizedType.ID}}")
        {{- end}}
        {{- if gt ($property.Enum | len) 0}}
        {{$spaces}}if {{$prefix}}["{{$property.ID}}"] and not {{$prefix}}["{{$property.ID}}"]:
            {{- $valid_value := $property.Enum | commaConnectedWithQuote}}
            {{$spaces}}{{$property.ID | snakeCase}}_valid_values = [{{replace $valid_value "\"" "\"" -1 }}]
            {{$spaces}}if str({{$prefix}}["{{$property.ID}}"]) not in {{$property.ID | snakeCase}}_valid_values:
                {{$spaces}}raise ParameterValueNotAllowedError(
                "{{$property.ID}}",
                {{$prefix}}["{{$property.ID}}"],
                {{$property.ID | snakeCase}}_valid_values
                )
        {{- end}}
        {{- end}}
        {{- end}}
        {{- end}}
{{- end}}

{{define "RenderInputValidation"}}
{{- $service := index . 0}}
{{- $operation := index . 1}}
{{- $customizedTypes := index . 2}}

{{- $request := $operation.Request}}
    {{$opID := replace $operation.ID "Bucket" "" -1}}
    @staticmethod
    {{- if ne $service "QingStor"}}
    def {{$opID | snakeCase }}_validate(op):
    {{- end}}
    {{- if eq $service "QingStor"}}
    def {{$operation.ID | snakeCase }}_validate(op):
    {{- end}}
    {{- if ne $service "QingStor"}}
        """Validate request input for {{$opID | snakeCase }}
        {{- end}}
        {{- if eq $service "QingStor"}}
        """Validate request input for {{$operation.ID | snakeCase }}
        {{- end}}

        Parameters:
            op (dict): operation built by input

        Raises:
            ParameterRequiredError: Parameter required not input.
            ParameterValueNotAllowedError: Parameter has not allowed value.

        """
        {{- $x := passThrough "op[\"Params\"]" $request.Params $customizedTypes ""}}
        {{- template "RenderCustomizedTypeValidation" $x }}
        {{- $x := passThrough "op[\"Headers\"]" $request.Headers $customizedTypes ""}}
        {{- template "RenderCustomizedTypeValidation" $x }}
        {{- $x := passThrough "op[\"Elements\"]" $request.Elements $customizedTypes ""}}
        {{- template "RenderCustomizedTypeValidation" $x }}
        pass
{{end}}

{{define "BuildRequest"}}
    {{- $service := index . 0}}
    {{- $operation := index . 1}}
    {{$opID := replace $operation.ID "Bucket" "" -1}}

    {{- $hasParams := gt (len $operation.Request.Params.Properties) 0}}
    {{- $hasHeaders := gt (len $operation.Request.Headers.Properties) 0}}
    {{- $hasElements := gt (len $operation.Request.Elements.Properties) 0}}
    {{- $hasStringBody := eq $operation.Request.Body.Type "string"}}
    {{- $hasBinaryBody := eq $operation.Request.Body.Type "binary"}}
    {{- $hasInput := or $hasParams $hasHeaders $hasElements $hasStringBody $hasBinaryBody}}

    {{- if ne $service "QingStor" -}}
    def {{$opID | snakeCase }}_request(self
    {{- end}}
    {{- if eq $service "QingStor" -}}
    def {{$operation.ID | snakeCase }}_request(self
    {{- end}}
        {{- if eq $service "Object"}},object_key{{end -}}
        {{- if $hasInput}},{{end -}}
        {{- template "OperationInitParams" passThrough $service $operation -}}):
        {{- if ne $service "QingStor"}}
        """Build request for {{$opID | snakeCase }}
        {{- end}}
        {{- if eq $service "QingStor"}}
        """Build request for {{$operation.ID | snakeCase }}
        {{- end}}

        Parameters:
            {{- if eq $service "Object"}}
            object_key (string): Object key name
            {{- end}}
            {{- range $id, $property := $operation.Request.Headers.Properties}}
            {{$property.Name| snakeCase}} ({{$property.Type}}): {{$property.Description}}
            {{- end}}
            {{- range $id, $property := $operation.Request.Params.Properties}}
            {{$property.Name| snakeCase}} ({{$property.Type}}): {{$property.Description}}
            {{- end}}
            {{- range $id, $property := $operation.Request.Elements.Properties}}
            {{$property.Name| snakeCase}} ({{$property.Type}}): {{$property.Description}}
            {{- end}}

        Returns:
            Request: A Request that not signed.

        See Also:
           {{$operation.DocumentationURL}}

        """
        {{- $uri := $operation.Request.URI}}
        {{- $uri := replace $uri "{" "<" -1}}
        {{- $uri := replace $uri "}" ">" -1}}
        {{- $uri := dashConnected $uri}}
        operation = {
            "API": "{{$operation.ID}}",
            "Method" : "{{$operation.Request.Method}}",
            "URI" : "{{$uri}}",
            "Headers": {
                {{- if ne $service "QingStor" -}}
                "Host": "".join([self.properties["zone"],".",self.config.host]),
                {{- end}}
                {{- if eq $service "QingStor" -}}
                "Host": self.config.host,
                {{- end}}
                {{- range $id, $property := $operation.Request.Headers.Properties}}
                "{{$property.Name}}": {{$property.Name| snakeCase}},
                {{- end}}
            },
            "Params": {
                {{- range $id, $property := $operation.Request.Params.Properties}}
                "{{$property.Name | snakeCase}}": {{$property.Name | snakeCase}},
                {{- end}}
            },
            "Elements": {
                {{- range $id, $property := $operation.Request.Elements.Properties}}
                "{{$property.Name}}": {{$property.ID | snakeCase}},
                {{- end}}
            },
            {{- if ne $service "QingStor" -}}
            "Properties" : self.properties,
            {{- end}}
            {{- if eq $service "QingStor" -}}
            "Properties" : {},
            {{- end}}
            "Body" : {{if eq $operation.Request.Body.Type "binary"}}body{{else}}None{{end}}
        }
        {{- if eq $service "Object"}}
        operation["Properties"]["object-key"] = object_key
        {{- end}}
        {{- if ne $service "QingStor"}}
        self.{{$opID | snakeCase }}_validate(operation)
        {{- end}}
        {{- if eq $service "QingStor"}}
        self.{{$operation.ID | snakeCase }}_validate(operation)
        {{- end}}
        return Request(self.config, operation)
{{- end}}

{{define "BuildNormalOperation"}}
    {{- $service := index . 0}}
    {{- $operation := index . 1}}
    {{$opID := replace $operation.ID "Bucket" "" -1}}

    {{- $hasParams := gt (len $operation.Request.Params.Properties) 0}}
    {{- $hasHeaders := gt (len $operation.Request.Headers.Properties) 0}}
    {{- $hasElements := gt (len $operation.Request.Elements.Properties) 0}}
    {{- $hasStringBody := eq $operation.Request.Body.Type "string"}}
    {{- $hasBinaryBody := eq $operation.Request.Body.Type "binary"}}
    {{- $hasInput := or $hasParams $hasHeaders $hasElements $hasStringBody $hasBinaryBody}}

    {{- if ne $service "QingStor" -}}
    def {{$opID | snakeCase}}(self
    {{- end}}
    {{- if eq $service "QingStor" -}}
    def {{$operation.ID | snakeCase }}(self
    {{- end}}
        {{- if eq $service "Object"}},object_key{{end -}}
        {{- if $hasInput}},{{end -}}
        {{- template "OperationInitParams" passThrough $service $operation -}}):
        {{- if ne $service "QingStor"}}
        """Send {{$opID | snakeCase }}_request
        {{- end}}
        {{- if eq $service "QingStor"}}
        """Send {{$operation.ID | snakeCase }}_request
        {{- end}}

        Parameters:
            {{- if eq $service "Object"}}
            object_key (string): Object key name
            {{- end}}
            {{- range $id, $property := $operation.Request.Headers.Properties}}
            {{$property.Name| snakeCase}} ({{$property.Type}}): {{$property.Description}}
            {{- end}}
            {{- range $id, $property := $operation.Request.Params.Properties}}
            {{$property.Name| snakeCase}} ({{$property.Type}}): {{$property.Description}}
            {{- end}}
            {{- range $id, $property := $operation.Request.Elements.Properties}}
            {{$property.Name| snakeCase}} ({{$property.Type}}): {{$property.Description}}
            {{- end}}

        Returns:
            Unpacker: Server Response that unpacked.

        See Also:
           {{$operation.DocumentationURL}}

        """
        {{- if ne $service "QingStor" }}
        req = self.{{$opID | snakeCase }}_request(
        {{- end}}
        {{- if eq $service "QingStor" }}
        req = self.{{$operation.ID | snakeCase }}_request(
        {{- end}}
            {{- if eq $service "Object"}}object_key{{end -}}
            {{- if and (eq $service "Object") $hasInput}},{{end -}}
            {{- template "OperationCallParams" passThrough $service $operation -}})
        resp = self.client.send(req.sign()
        {{- if eq $operation.ID "GetObject" -}},stream=True{{- end -}}
        )
        return Unpacker(resp)
{{- end}}

{{define "RenderOperation"}}
{{- $service := index . 0}}
{{- $operation := index . 1}}
{{- $customizedTypes := index . 2}}
{{- template "BuildRequest" passThrough $service $operation}}
{{- template "BuildNormalOperation" passThrough $service $operation}}
{{- template "RenderInputValidation" passThrough $service $operation $customizedTypes}}
{{end}}
